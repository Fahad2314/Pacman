# sampleAgents.py
# parsons/07-oct-2017
#
# Version 1.1
#
# Some simple agents to work with the PacMan AI projects from:
#
# http://ai.berkeley.edu/
#
# These use a simple API that allow us to control Pacman's interaction with
# the environment adding a layer on top of the AI Berkeley code.
#
# As required by the licensing agreement for the PacMan AI we have:
#
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).

# The agents here are extensions written by Simon Parsons, based on the code in
# pacmanAgents.py

from pacman import Directions
from game import Agent
import api
import random
import game
import util
import collections

# RandomAgent
#
# A very simple agent. Just makes a random pick every time that it is
# asked for an action.
class RandomAgent(Agent):

    def getAction(self, state):
        # Get the actions we can try, and remove "STOP" if that is one of them.
        legal = api.legalActions(state)
        if Directions.STOP in legal:
            legal.remove(Directions.STOP)
        # Random choice between the legal options.
        return api.makeMove(random.choice(legal), legal)

# RandomishAgent
#
# A tiny bit more sophisticated. Having picked a direction, keep going
# until that direction is no longer possible. Then make a random
# choice.
class RandomishAgent(Agent):

    # Constructor
    #
    # Create a variable to hold the last action
    def __init__(self):
         self.last = Directions.STOP
    
    def getAction(self, state):
        # Get the actions we can try, and remove "STOP" if that is one of them.
        legal = api.legalActions(state)
        if Directions.STOP in legal:
            legal.remove(Directions.STOP)
        # If we can repeat the last action, do it. Otherwise make a
        # random choice.
        if self.last in legal:
            return api.makeMove(self.last, legal)
        else:
            pick = random.choice(legal)
            # Since we changed action, record what we did
            self.last = pick
            return api.makeMove(pick, legal)

# SensingAgent
#
# Doesn't move, but reports sensory data available to Pacman
class SensingAgent(Agent):
    def __init__(self):
        self.flag = 0
        self.counter =0
        #persistent food list that pacman sees as he travels the grid
        self.food_list=list()
        #persistent list which follows pacmans footsetps
        self.pacman_steps = list()
        #list containing food which is not in pacmans steps so he does not unnecessarily go over his steps in search for food
        

    def getAction(self, state):
        corners = api.corners(state)
        wall_location = api.walls(state)
        my_location = api.whereAmI(state)
        food_location = api.food(state)
        
        global flag
        global food_list
        global pacman_steps
        global counter
        
        if self.flag == 0:
            #set self flag == 0 
            print("Flag is 0")
            raw_input("Press Enter")
            legal = api.legalActions(state)
            #increase self flag so that the getAction will return the next if block
            
            x,y =corners[0]
            #bottom left
            x = x +1
            y = y +1
            goal = (x,y)
            if goal not in wall_location:
                    pathlist = self.bfs(my_location, goal ,wall_location)
                    direc = self.mapRoute(my_location,pathlist,legal,self.flag)
                    #print("Food visible:", food_location)
                    #add all visible food to the persistent food_location variable
                    for food in food_location:
                        #print(food)
                        self.food_list.append(food)
                    #add every location that pacman is ever at to the persistent pacman_steps list
                    self.pacman_steps.append(my_location)
                    
                    
                    print("direc:", direc)
                    return api.makeMove(direc,legal)
            else:
                self.flag=1
        
        if self.flag ==1:
            
            print("Flag is 1")
            raw_input("Press Enter")
            legal = api.legalActions(state)
            #increase self flag so that the getAction will return the next if block
            
            x,y =corners[2]
            #top left
            x = x +1
            y = y -1
            goal = (x,y)
            if goal not in wall_location:
                    pathlist = self.bfs(my_location, goal ,wall_location)
                    direc = self.mapRoute(my_location,pathlist,legal,self.flag)
                    #updates the food_list a persistent list of food that pacman see's on his travels
                    print("Food visible:", food_location)
                    for food in food_location:
                        #print(food)
                        self.food_list.append(food)
                    self.pacman_steps.append(my_location)
                    
                   
                    print("direc:", direc)
                    return api.makeMove(direc,legal)
                    
            else:
                self.flag =2
                
        if self.flag == 2:
            print("Flag is 2")
            raw_input("Press Enter")
            legal = api.legalActions(state)
            
            x,y =corners[3]
            #top right
            x = x -1
            y = y -1
            goal = (x,y)
            if goal not in wall_location:
                    pathlist = self.bfs(my_location, goal ,wall_location)
                    direc = self.mapRoute(my_location,pathlist,legal,self.flag)
                    
                    for food in food_location:
                        #print(food)
                        self.food_list.append(food)
                    self.pacman_steps.append(my_location)
                    
                        
                    print("direc:", direc)
                    return api.makeMove(direc,legal)
            else:
                self.flag =3
        
        if self.flag ==3:
            print("Flag is 3")
            raw_input("Press Enter")
            legal = api.legalActions(state)
            
            x,y =corners[1]
            #bottom right
            x = x -1
            y = y +1
            goal = (x,y)
            if goal not in wall_location:
                #pathlist is the bfs which returns the path to the food location
                    pathlist = self.bfs(my_location, goal ,wall_location)
                    #pass the bfs pathlist into the direc function 
                    direc = self.mapRoute(my_location,pathlist,legal,self.flag)
                    #print("Food visible:", food_location)
                    for food in food_location:
                        #print(food)
                        self.food_list.append(food)
                        
                    self.pacman_steps.append(my_location)
                    
                        
                    print("direc:", direc)
                    
                    remaining_food = list(set(self.food_list) - set(self.pacman_steps))
                    global remaining_food
                    print("length of remaining food:", len(remaining_food))
                    print("Ordered Food Remaining  ", remaining_food)
                    return api.makeMove(direc,legal)
            else:
                self.flag =4
                return api.makeMove(Directions.STOP, legal)
        
   
        
        #loop through the list how many times it requires to end the remaining food list
        while self.flag <= (len(remaining_food) + self.flag):
            legal = api.legalActions(state)
            print("the final flag is ", self.flag)
            print("the counter is: ", self.counter)
            goal = remaining_food[self.counter]
            
            pathlist_f = self.bfs(my_location, goal ,wall_location)
            print("pathlist: ", pathlist_f)
            direc = self.mapRouteFinal(my_location,pathlist_f,legal,self.flag,self.counter)
            return api.makeMove(direc,legal)
            
            
            
            
            
    
            
            
            
            
            
            
            
            
            
            
            
            
            #for i in  range(len(remaining_food)):
                #goal = remaining_food[i]
                #pathlist = self.bfs(my_location, goal ,wall_location)
                
                #print("goal:", goal)
                #print("pathlist", pathlist)
                #insert while loop so that while pathlist isnt empty and do operations on the vars
                #direc = self.mapRoute(my_location,pathlist,legal,self.flag)
                #return api.makeMove(direc)
            
            
               
                
        #self.flag =5
        #if self.flag==5:
            #legal = api.legalActions(state)
            #print("Flag is 5")
            
            #return api.makeMove(Directions.STOP, legal)

            
                
                #pathlist = self.bfs(my_location, goal ,wall_location)
                
                #print("pathlist to goal", pathlist)
                
                #direc = self.mapRouteFinal(my_location,pathlist,legal,self.flag)
                
                #print("direc:", direc)
                #self.flag =4
            #return api.makeMove(Directions.STOP,legal)
            
        
        #if self.flag < 100:
            #legal = api.legalActions(state)
            #print("Flag is 5")
            #return api.makeMove(Directions.STOP,legal)
        
        
                
                

                
            
            
           
            #need a for loop to construct a goal from the pathlist? pathlist takes a single goal need to loop through food list
            
            #direc = self.mapRoute(my_location,food_location,legal,self.flag)
            
            
            #return api.makeMove(Directions.STOP,legal)
            
            
            
        
    def mapRoute(self,current_location,next_location,legal,flag):
        # current location calls the api.whereAmI for pacman location, next_location is the pathlist
        next_location.pop(0)
        #removes the current location from the pathlist
        len_of_list = len(next_location)
        for i in range(len_of_list):
            
            #loop runs until the pathlist is empty 
            if len_of_list >1:
                #print(next_location)
                #print("Pacman was at :", current_location)
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (1,0) :
                    print("Went East to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.EAST in legal:
                        return Directions.EAST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (-1,0) :
                    print("Went  West to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.WEST in legal:
                        return Directions.WEST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,1):
                    print("Went  North to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.NORTH in legal:
                        return Directions.NORTH
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,-1):
                    print("Went  South to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.SOUTH in legal:
                        return Directions.SOUTH
            if len_of_list == 1:
                print(next_location)
                print("steps left:", len_of_list)
                print("NEW FLAG !!!!!!")
                #self.flag =1
                self.flag = self.flag +1
                
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (1,0) :
                    print("Went East to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.EAST in legal:
                        return Directions.EAST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (-1,0) :
                    print("Went  West to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.WEST in legal:
                        return Directions.WEST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,1):
                    print("Went  North to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.NORTH in legal:
                        return Directions.NORTH
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,-1):
                    print("Went  South to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.SOUTH in legal:
                        return Directions.SOUTH
                    
                    
    def mapRouteFinal(self,current_location,next_location,legal,flag,counter):
        # current location calls the api.whereAmI for pacman location, next_location is the pathlist
        next_location.pop(0)
        #removes the current location from the pathlist
        len_of_list = len(next_location)
        for i in range(len_of_list):
            
            #loop runs until the pathlist is empty 
            if len_of_list >1:
                print(next_location)
                print("Pacman was at :", current_location)
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (1,0) :
                    print("Went East to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.EAST in legal:
                        return Directions.EAST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (-1,0) :
                    print("Went  West to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.WEST in legal:
                        return Directions.WEST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,1):
                    print("Went  North to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.NORTH in legal:
                        return Directions.NORTH
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,-1):
                    print("Went  South to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.SOUTH in legal:
                        return Directions.SOUTH
            if len_of_list == 1:
                print(next_location)
                print("steps left:", len_of_list)
                print("NEW FLAG !!!!!!")
                #self.flag =1
                self.flag = self.flag +1
                self.counter = self.counter +1
                print("new flag:", self.flag)
                print("new counter:", self.counter)
                
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (1,0) :
                    print("Went East to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.EAST in legal:
                        return Directions.EAST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (-1,0) :
                    print("Went  West to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.WEST in legal:
                        return Directions.WEST
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,1):
                    print("Went  North to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.NORTH in legal:
                        return Directions.NORTH
                if ((next_location[0][0] - current_location[0]),(next_location[0][1] - current_location[1])) == (0,-1):
                    print("Went  South to:", next_location[0])
                    print("steps left:", len_of_list)
                    if Directions.SOUTH in legal:
                        return Directions.SOUTH
                    
    
            
                 
    def bfs(self,start,goal,wall_location):
        
        queue = collections.deque()
        visited = set()
        meta = dict()
        
        #initialize
        meta[start] = (None,None)
        #append the start/root to the queue for frontier
        queue.append(start)
        
        while queue:
            #current node is the current node being explored in the frontier from queue
            start = queue.popleft()
            #if the current node is the goal then call the construct_path function with current, and meta dict
            if start == goal:
                return (self.construct_path(start, meta,goal))
            
            #for child in current node
            for child, action in self.get_successor(start):
                
                if child in visited:
                    continue
                elif (child not in queue) and (child not in wall_location):
                    meta[child]=(start,action)
                    queue.append(child)
                    
            visited.add(start)
            
            #print(visited)

        
   
    def get_successor(self,my_location):
        #create a list of children for the current location from pacman api
        #print(my_location)
        x,y = my_location
        children = []
        east = ((x+1,y),(1,0))
        west = ((x-1,y),(-1,0))
        north = ((x,y+1),(0,1))
        south = ((x,y-1),(0,-1))
        children.append(east)
        children.append(west)
        children.append(north)
        children.append(south)
        #print(children)
        
        
        return children
    
    def construct_path(self,node,meta,goal):
        action_list = []
        while (meta[node][0] != None):
            node,action = meta[node]
            action_list.append(node)
            
        action_list.reverse()
        action_list = (action_list) +[goal]
        #print(action_list)
        return action_list 
    
    def order_list(self,unordered_list):
        unordered_list.sort()
        unordered_list.reverse()
        return unordered_list
        
        
