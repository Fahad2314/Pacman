#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 16 18:22:41 2018

@author: K1895936
"""

import collections
coordinates = [(i,j) for i in range(20) for j in range(10)]
coordinates = sorted(coordinates)
walls =  [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (0, 10), (1, 0), (1, 10), 
          (2, 0), (2, 2), (2, 3), (2, 4), (2, 6), (2, 7), (2, 8), (2, 10), (3, 0), (3, 2), (3, 8), (3, 10),
          (4, 0), (4, 4), (4, 6), (4, 10), (5, 0), (5, 1), (5, 2), (5, 4), (5, 6), (5, 8), (5, 9), (5, 10), (6, 0),
          (6, 10), (7, 0), (7, 2), (7, 4), (7, 5), (7, 6), (7, 8), (7, 10), (8, 0), (8, 2), (8, 4), (8, 6), (8, 8), 
          (8, 10), (9, 0), (9, 2), (9, 4), (9, 8), (9, 10), (10, 0), (10, 2), (10, 4), (10, 8), (10, 10), (11, 0),
          (11, 2), (11, 4), (11, 6), (11, 8), (11, 10), (12, 0), (12, 2), (12, 4), (12, 5), (12, 6), (12, 8), (12, 10), 
          (13, 0), (13, 10), (14, 0), (14, 1), (14, 2), (14, 4), (14, 6), (14, 8), (14, 9), (14, 10), (15, 0), (15, 4), 
          (15, 6), (15, 10), (16, 0), (16, 2), (16, 8), (16, 10), (17, 0), (17, 2), (17, 3), (17, 4), (17, 6), (17, 7), 
          (17, 8), (17, 10), (18, 0), (18, 10), (19, 0), (19, 1), (19, 2), (19, 3), (19, 4), (19, 5), (19, 6), (19, 7), 
          (19, 8), (19, 9), (19, 10)]
food = []
graph = {}

def get_successor(subtree_root):
    
    x,y = subtree_root
    children = []
    east = ((x+1,y),(1,0))
    west = ((x-1,y),(-1,0))
    north = ((x,y+1),(0,1))
    south = ((x,y-1),(0,-1))
    children.append(east)
    children.append(west)
    children.append(north)
    children.append(south)
    
    return children


for i in range(len(coordinates)):
    #for each coordinate check if its a wall
    if coordinates[i] in walls:
        pass
    elif coordinates[i] not in walls:
        food.append(coordinates[i])
        
        
def bfs(start,goal):
    queue = collections.deque()
    visited = set()
    meta = dict()
    
    #initialize
    meta[start] = (None,None)
    #append the start/root to the queue for frontier
    queue.append(start)
    
    while queue:
        #current node is the current node being explored in the frontier from queue
        subtree_root = queue.popleft()
        #if the current node is the goal then call the construct_path function with current, and meta dict
        if subtree_root == goal:
            return (construct_path(subtree_root, meta))
        
        #for child in current node
        for child, action in get_successor(subtree_root):
            
            if child in visited:
                continue
            elif (child not in queue) and (child not in walls):
                meta[child]=(subtree_root,action)
                queue.append(child)
                
        visited.add(subtree_root)
        

def construct_path(node,meta):
    action_list = []
    while (meta[node][0] != None):
        node,action = meta[node]
        action_list.append(action)
        
    action_list.reverse()
    #return action_list
    print(action_list)

bfs((9,1),(13,2))
